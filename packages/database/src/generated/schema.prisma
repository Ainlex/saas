generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id                 String                 @id @default(cuid())
  nombre             String
  ruc                String                 @unique
  activo             Boolean                @default(true)
  direccion          String?
  email              String?
  fechaActualizacion DateTime               @updatedAt
  fechaCreacion      DateTime               @default(now())
  telefono           String?
  plan               PlanType               @default(STARTER)
  clientes           Cliente[]
  configuraciones    EmpresaConfiguracion[]
  modulosActivos     EmpresaModulo[]
  moduloHistorico    ModuloHistorico[]
  facturas           Factura[]
  movimientosCaja    MovimientoCaja[]
  productos          Producto[]
  usuarios           Usuario[]

  @@map("empresas")
}

model Usuario {
  id                String            @id @default(cuid())
  email             String            @unique
  nombre            String
  apellido          String?
  password          String
  empresaId         String
  rolId             String
  activo            Boolean           @default(true)
  resetToken        String?
  resetTokenExpires DateTime?
  empresa           Empresa           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  rol               Rol               @relation(fields: [rolId], references: [id])
  moduloHistorico   ModuloHistorico[]

  @@map("usuarios")
}

model Modulo {
  id                String              @id @default(cuid())
  nombre            String              @unique
  displayName       String
  version           String              @default("1.0.0")
  activo            Boolean             @default(true)
  color             String?
  descripcion       String?
  icono             String?
  orden             Int                 @default(0)
  empresasConModulo EmpresaModulo[]
  moduloHistorico   ModuloHistorico[]
  esDependenciaDe   ModuloDependencia[] @relation("ModuloDependiente")
  dependeDe         ModuloDependencia[] @relation("ModuloPrincipal")
  permisos          ModuloPermiso[]
  rutas             ModuloRuta[]

  @@map("modulos")
}

model EmpresaModulo {
  id                 String    @id @default(cuid())
  empresaId          String
  moduloId           String
  activo             Boolean   @default(true)
  configuracion      Json?
  fechaActivacion    DateTime  @default(now())
  fechaDesactivacion DateTime?
  empresa            Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  modulo             Modulo    @relation(fields: [moduloId], references: [id])

  @@unique([empresaId, moduloId])
  @@map("empresa_modulos")
}

model ModuloDependencia {
  id          String  @id @default(cuid())
  moduloId    String
  dependeDeId String
  requerido   Boolean @default(true)
  dependeDe   Modulo  @relation("ModuloDependiente", fields: [dependeDeId], references: [id])
  modulo      Modulo  @relation("ModuloPrincipal", fields: [moduloId], references: [id])

  @@unique([moduloId, dependeDeId])
  @@map("modulo_dependencias")
}

model ModuloRuta {
  id          String  @id @default(cuid())
  moduloId    String
  ruta        String
  activo      Boolean @default(true)
  descripcion String?
  nombre      String
  modulo      Modulo  @relation(fields: [moduloId], references: [id])

  @@map("modulo_rutas")
}

model Rol {
  id          String       @id @default(cuid())
  nombre      String
  activo      Boolean      @default(true)
  descripcion String?
  permisos    RolPermiso[]
  usuarios    Usuario[]

  @@map("roles")
}

model ModuloPermiso {
  id          String       @id @default(cuid())
  moduloId    String
  nombre      String
  codigo      String
  descripcion String?
  modulo      Modulo       @relation(fields: [moduloId], references: [id])
  roles       RolPermiso[]

  @@unique([moduloId, codigo])
  @@map("modulo_permisos")
}

model RolPermiso {
  id        String        @id @default(cuid())
  rolId     String
  permisoId String
  permiso   ModuloPermiso @relation(fields: [permisoId], references: [id])
  rol       Rol           @relation(fields: [rolId], references: [id])

  @@unique([rolId, permisoId])
  @@map("rol_permisos")
}

model EmpresaConfiguracion {
  id        String   @id @default(cuid())
  empresaId String
  clave     String
  valor     Json
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@unique([empresaId, clave])
  @@map("empresa_configuraciones")
}

model Factura {
  id        String   @id @default(cuid())
  empresaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("facturas")
}

model Producto {
  id        String   @id @default(cuid())
  empresaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("productos")
}

model Cliente {
  id        String   @id @default(cuid())
  empresaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("clientes")
}

model MovimientoCaja {
  id        String   @id @default(cuid())
  empresaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("movimientos_caja")
}

model ModuloHistorico {
  id            String   @id @default(cuid())
  empresaId     String
  moduloId      String
  accion        String // ACTIVADO, DESACTIVADO
  usuarioId     String
  razon         String?
  fechaCreacion DateTime @default(now())

  // Relaciones
  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  modulo  Modulo  @relation(fields: [moduloId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@map("modulo_historico")
}

enum PlanType {
  STARTER
  PROFESIONAL
  EMPRESARIAL
}
