import { PrismaClient } from './generated'

const prisma = new PrismaClient()

async function createDemoData() {
  try {
    console.log('üå± Creando datos demo...')

    // Crear empresa demo
    const empresa = await prisma.empresa.create({
      data: {
        nombre: 'Ferreter√≠a Demo',
        ruc: '12345678-1',
        email: 'demo@ferreteria.py',
        telefono: '+595 21 123 456',
        direccion: 'Asunci√≥n, Paraguay',
        plan: 'PROFESIONAL',
        activo: true
      }
    })

    console.log('‚úÖ Empresa creada:', empresa.id)

    // Crear m√≥dulos demo
    const modulos = await Promise.all([
      prisma.modulo.create({
        data: {
          nombre: 'pos',
          displayName: 'Punto de Venta',
          descripcion: 'Sistema POS t√°ctil para ventas r√°pidas',
          version: '1.0.0',
          activo: true,
          orden: 1,
          icono: 'üõí',
          color: '#3B82F6'
        }
      }),
      prisma.modulo.create({
        data: {
          nombre: 'inventario',
          displayName: 'Inventario',
          descripcion: 'Gesti√≥n completa de stock y productos',
          version: '1.0.0',
          activo: true,
          orden: 2,
          icono: 'üì¶',
          color: '#10B981'
        }
      }),
      prisma.modulo.create({
        data: {
          nombre: 'facturacion',
          displayName: 'Facturaci√≥n',
          descripcion: 'Facturaci√≥n electr√≥nica y reportes',
          version: '1.0.0',
          activo: true,
          orden: 3,
          icono: 'üìÑ',
          color: '#F59E0B'
        }
      }),
      prisma.modulo.create({
        data: {
          nombre: 'contabilidad',
          displayName: 'Contabilidad',
          descripcion: 'Libro diario y mayor',
          version: '1.0.0',
          activo: true,
          orden: 4,
          icono: 'üìä',
          color: '#8B5CF6'
        }
      }),
      prisma.modulo.create({
        data: {
          nombre: 'crm',
          displayName: 'CRM',
          descripcion: 'Gesti√≥n de clientes y contactos',
          version: '1.0.0',
          activo: true,
          orden: 5,
          icono: 'üë•',
          color: '#EC4899'
        }
      }),
      prisma.modulo.create({
        data: {
          nombre: 'reportes',
          displayName: 'Reportes',
          descripcion: 'Reportes y an√°lisis de datos',
          version: '1.0.0',
          activo: true,
          orden: 6,
          icono: 'üìà',
          color: '#06B6D4'
        }
      })
    ])

    console.log('‚úÖ M√≥dulos creados:', modulos.length)

    // Crear roles
    const rolAdmin = await prisma.rol.create({
      data: {
        nombre: 'ADMIN',
        descripcion: 'Administrador de empresa',
        activo: true
      }
    })

    const rolUsuario = await prisma.rol.create({
      data: {
        nombre: 'USUARIO',
        descripcion: 'Usuario est√°ndar',
        activo: true
      }
    })

    console.log('‚úÖ Roles creados')

    // Activar todos los m√≥dulos para la empresa demo
    const empresaModulos = await Promise.all(
      modulos.map(modulo => 
        prisma.empresaModulo.create({
          data: {
            empresaId: empresa.id,
            moduloId: modulo.id,
            activo: true,
            configuracion: {}
          }
        })
      )
    )

    console.log('‚úÖ M√≥dulos activados para empresa:', empresaModulos.length)

    // Crear rutas para los m√≥dulos
    const rutas = [
      { moduloId: modulos[0].id, ruta: '/pos', nombre: 'Punto de Venta' },
      { moduloId: modulos[1].id, ruta: '/inventario', nombre: 'Inventario' },
      { moduloId: modulos[2].id, ruta: '/facturacion', nombre: 'Facturaci√≥n' },
      { moduloId: modulos[3].id, ruta: '/contabilidad', nombre: 'Contabilidad' },
      { moduloId: modulos[4].id, ruta: '/crm', nombre: 'CRM' },
      { moduloId: modulos[5].id, ruta: '/reportes', nombre: 'Reportes' }
    ]

    await Promise.all(
      rutas.map(ruta =>
        prisma.moduloRuta.create({
          data: {
            moduloId: ruta.moduloId,
            ruta: ruta.ruta,
            nombre: ruta.nombre,
            activo: true
          }
        })
      )
    )

    console.log('‚úÖ Rutas creadas')

    console.log('üéâ Datos demo creados exitosamente!')
    console.log('üìã Empresa Demo ID:', empresa.id)
    console.log('üìã Empresa Demo RUC:', empresa.ruc)
    console.log('üìã M√≥dulos activos:', modulos.length)

    return {
      empresaId: empresa.id,
      empresaRuc: empresa.ruc,
      modulosCount: modulos.length
    }

  } catch (error) {
    console.error('‚ùå Error creando datos demo:', error)
    throw error
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  createDemoData()
    .then(() => {
      console.log('‚úÖ Seed completado')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Error en seed:', error)
      process.exit(1)
    })
}

export { createDemoData } 